// generated by /Users/mohangk/Workspace/sqlpp11/scripts/ddl2cpp ./articles.sql ./articles DB
#ifndef DB_ARTICLES_H
#define DB_ARTICLES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace DB
{
  namespace Articles_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct ShortDesc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "short_desc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shortDesc;
            T& operator()() { return shortDesc; }
            const T& operator()() const { return shortDesc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct ContentBody
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content_body";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentBody;
            T& operator()() { return contentBody; }
            const T& operator()() const { return contentBody; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PublishDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "publish_date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T publishDate;
            T& operator()() { return publishDate; }
            const T& operator()() const { return publishDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct CreatedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdAt;
            T& operator()() { return createdAt; }
            const T& operator()() const { return createdAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct UpdatedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "updated_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updatedAt;
            T& operator()() { return updatedAt; }
            const T& operator()() const { return updatedAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct CategoryId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "category_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryId;
            T& operator()() { return categoryId; }
            const T& operator()() const { return categoryId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Keywords
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "keywords";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T keywords;
            T& operator()() { return keywords; }
            const T& operator()() const { return keywords; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Published
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "published";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T published;
            T& operator()() { return published; }
            const T& operator()() const { return published; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
    };
  }

  struct Articles: sqlpp::table_t<Articles,
               Articles_::Id,
               Articles_::Title,
               Articles_::ShortDesc,
               Articles_::ContentBody,
               Articles_::PublishDate,
               Articles_::CreatedAt,
               Articles_::UpdatedAt,
               Articles_::CategoryId,
               Articles_::Keywords,
               Articles_::Published>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "articles";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T articles;
        T& operator()() { return articles; }
        const T& operator()() const { return articles; }
      };
    };
  };
}
#endif
